swagger: "2.0"

info:
  version: "1.0"
  title: Artrunde Public API
  license:
    name: MIT
host: api-rodin-prd.artrunde.com

basePath: /v1/public
schemes:
  - https

paths:

  #######################
  ###     PING       ###
  #######################

  /ping:
    get:
      summary: "Check API is alive"
      description: "Get information about API"
      operationId: "debugUrl"
      tags:
          - "Ping"
      produces:
        - application/json
      responses:
        200:
          description: "Ping information"
          schema:
            $ref: "#/definitions/Ping"

  #######################
  ###      TAGS       ###
  #######################

  /tags?query={query}&locale={locale}:
      get:
        tags:
          - "Tag"
        summary: "Query tags"
        description: "Query database for tags"
        operationId: "queryTags"
        produces:
          - application/json
        parameters:
          - name: "query"
            in: path
            description: "Search term to query"
            required: true
            type: string
            x-example: "berlin"
          - name: "locale"
            in: path
            description: "Language to search against"
            required: true
            type: string
            enum:
            - "en"
            - "dk"
            x-example: "en"
        responses:
          200:
            description: "Successful result"
            schema:
              type: "array"
              items:
                $ref: "#/definitions/TagResult"
          404:
            description: "Items not found"
            schema:
              $ref: "#/definitions/Error"


  ########################
  ###      PLACES      ###
  ########################

  /places?tags={tag_id}:
    get:
      tags:
        - "Place"
      summary: "Get place"
      description: "Retrieve data about a specific gallery, museum or exhibition"
      operationId: "queryPlacesByTags"
      produces:
        - application/json
      parameters:
        - name: "tag_id"
          in: path
          description: "Tags to use for quering a place. Multiple tags can be used with the '+' delimiter e.g tags=tag_id1+tag_id2"
          required: true
          type: string
          x-example: "58fdc6725f2b7"
      responses:
        200:
          description: "Successful result"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/PlaceResult"
        404:
          description: "Item not found"
          schema:
            $ref: "#/definitions/Error"

  /places/{url}:
    get:
      tags:
        - "Place"
      summary: "Get place"
      description: "Retrieve data about a specific gallery, museum or exhibition"
      operationId: "getPlaceByURL"
      produces:
        - application/json
      parameters:
        - name: "url"
          in: path
          description: "Place url identifier"
          required: true
          type: string
          x-example: "kalles-house-of-art"
      responses:
        200:
          description: "Successful result"
          schema:
            $ref: "#/definitions/PlaceResult"
        404:
          description: "Item not found"
          schema:
            $ref: "#/definitions/Error"

  /places/{place_id}:
    get:
      tags:
        - "Place"
      summary: "Get place"
      description: "Retrieve data about a specific gallery, museum or exhibition"
      operationId: "getPlaceByID"
      produces:
        - application/json
      parameters:
        - name: "place_id"
          in: path
          description: "Place unique identifier. This can be both url or place_id"
          required: true
          type: string
          x-example: "58fdc686b60d4"
      responses:
        200:
          description: "Successful result"
          schema:
            $ref: "#/definitions/PlaceResult"
        404:
          description: "Item not found"
          schema:
            $ref: "#/definitions/Error"

### ref-compiler: BEGIN

############################
###     Definitions      ###
############################

definitions:

  ErrorMessages:
    type: object
    properties:
      text:
        type: string
        example: "Item(s) not found"
      type:
        type: string
        example: "warning"

  Error:
    type: object
    properties:
      meta:
        type: object
        properties:
          statusCode:
            type: integer
            enum:
              - 400
              - 404
          statusMessage:
            type: string
            example: "Item(s) not found"
          count:
            type: integer
            example: 1
          version:
            type: string
            example: "v1.1.0"
          environment:
            type: string
            example: "dev"
          stage:
            type: string
            example: "stagename"
          build:
            type: string
            example: "555"
      messages:
        type: array
        items:
          $ref: "#/definitions/ErrorMessages"
      data:
        type: string

  ########################################################
  ###                     PING                         ###
  ########################################################

  Ping:
    type: object
    properties:
      params:
        type: object
    required:
      - "params"

  #############################################
  ###                    TAGS               ###
  #############################################

  TagResult:
    type: object
    properties:
      belongs_to:
        type: string
      query:
        type: string
        pattern: "[a-z0-9]{3,64}"
        minLength: 3
        maxLength: 64
      locale:
        type: string
        enum:
        - "en"
        - "dk"
      type:
        type: string
        enum:
        - "city"
        - "artist"
        - "place"
      label:
        type: string
    required:
      - "belongs_to"
      - "query"
      - "locale"
      - "label"
      - "type"

  ##########################################
  ###               PLACES               ###
  ##########################################

  PlaceResult:
    type: object
    properties:
      place_id:
        type: string
      url:
        type: string
      locales:
        type: object
        properties:
          en:
            $ref: "#/definitions/PlaceLocales"
          dk:
            $ref: "#/definitions/PlaceLocales"
        required:
          - "en"
          - "dk"
      latitude:
        type: number
      longitude:
        type: number
      country_code:
        type: string
    required:
      - "place_id"
      - "url"
      - "locales"
      - "latitude"
      - "longitude"
      - "country_code"

  PlaceLocales:
    type: object
    properties:
      place_name:
        type: string
        example: "Metropolitan Museuum of Arts"
        x-example: "Metropolitan Museuum of Arts"
        minLength: 1
        maxLength: 128
      address1_name:
        type: string
        example: "Anna-Louisa-Karsch-Straße 2"
        x-example: "Anna-Louisa-Karsch-Straße 2"
        minLength: 2
        maxLength: 64
      postal_code:
        type: string
        example: "10178"
        x-example: "10178"
        minLength: 1
        maxLength: 16
      city_name:
        type: string
        example: "Berlin"
        x-example: "Berlin"
        pattern: "[a-z0-9]{1,64}"
        minLength: 1
        maxLength: 64
      country_name:
        type: string
        example: "Germany"
        x-example: "Germany"
        pattern: "[a-z0-9]{1,64}"
        minLength: 1
        maxLength: 64
    required:
      - "place_name"
      - "address1_name"
      - "postal_code"
      - "city_name"
      - "country_name"